// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace QaTask.Features.PetStore.API
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Pet Store User Operations")]
    public partial class PetStoreUserOperationsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "PetStoreUserOperations.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/PetStore/API", "Pet Store User Operations", "Manage users in the pet store system", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get User by Username")]
        [NUnit.Framework.CategoryAttribute("api")]
        public void GetUserByUsername()
        {
            string[] tagsOfScenario = new string[] {
                    "api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get User by Username", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "username",
                            "firstName",
                            "lastName",
                            "email",
                            "password",
                            "phone",
                            "userStatus"});
                table1.AddRow(new string[] {
                            "394545",
                            "user1",
                            "John",
                            "Gewrgiou",
                            "johngewrg@tester.com",
                            "test1234",
                            "34663453",
                            "0"});
#line 6
        testRunner.Given("I have a user with the following data", ((string)(null)), table1, "Given ");
#line hidden
#line 9
        testRunner.When("I request the user \"user1 \" from the API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
        testRunner.Then("the response should contain user data for \"user1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a user by username")]
        [NUnit.Framework.CategoryAttribute("api")]
        public void DeleteAUserByUsername()
        {
            string[] tagsOfScenario = new string[] {
                    "api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a user by username", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "username",
                            "firstName",
                            "lastName",
                            "email",
                            "password",
                            "phone",
                            "userStatus"});
                table2.AddRow(new string[] {
                            "394545",
                            "Testuser02",
                            "John",
                            "Gewrgiou",
                            "johngewrg@tester.com",
                            "test1234",
                            "34663453",
                            "0"});
#line 14
        testRunner.Given("I have a user with the following data", ((string)(null)), table2, "Given ");
#line hidden
#line 17
        testRunner.When("I delete the user \"Testuser02\" from the API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
        testRunner.Then("the response should confirm the user \"Testuser02\" is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create User and Verify Creation")]
        [NUnit.Framework.CategoryAttribute("api")]
        public void CreateUserAndVerifyCreation()
        {
            string[] tagsOfScenario = new string[] {
                    "api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create User and Verify Creation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "username",
                            "firstName",
                            "lastName",
                            "email",
                            "password",
                            "phone",
                            "userStatus"});
                table3.AddRow(new string[] {
                            "394545",
                            "Testuser02",
                            "John",
                            "Gewrgiou",
                            "johngewrg@tester.com",
                            "test1234",
                            "34663453",
                            "0"});
#line 22
        testRunner.When("I create a user with the following data", ((string)(null)), table3, "When ");
#line hidden
#line 25
        testRunner.Then("assert that the user \"Testuser02\" has been created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update user details")]
        [NUnit.Framework.CategoryAttribute("api")]
        public void UpdateUserDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update user details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "username",
                            "firstName",
                            "lastName",
                            "email",
                            "password",
                            "phone",
                            "userStatus"});
                table4.AddRow(new string[] {
                            "394545",
                            "Testuser02",
                            "John",
                            "Gewrgiou",
                            "johngewrg@tester.com",
                            "test1234",
                            "34663453",
                            "0"});
#line 29
        testRunner.Given("I have a user with the following data", ((string)(null)), table4, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "username",
                            "firstName",
                            "lastName",
                            "email",
                            "password",
                            "phone",
                            "userStatus"});
                table5.AddRow(new string[] {
                            "394545",
                            "Testuser02",
                            "Maria",
                            "Vasilikou",
                            "mariavasik@tester.com",
                            "test1234",
                            "99463453",
                            "0"});
#line 32
        testRunner.When("I update the user \"Testuser02\" with the following data", ((string)(null)), table5, "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "username",
                            "firstName",
                            "lastName",
                            "email",
                            "password",
                            "phone",
                            "userStatus"});
                table6.AddRow(new string[] {
                            "394545",
                            "Testuser02",
                            "Maria",
                            "Vasilikou",
                            "mariavasik@tester.com",
                            "test1234",
                            "99463453",
                            "0"});
#line 35
        testRunner.Then("the response should confirm the user details are updated as follows", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
